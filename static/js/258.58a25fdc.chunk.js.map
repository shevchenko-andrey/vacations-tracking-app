{"version":3,"file":"static/js/258.58a25fdc.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CssBaseline/CssBaseline.js","screens/Login/Login.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useThemeProps from '../styles/useThemeProps';\nimport GlobalStyles from '../GlobalStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const html = (theme, enableColorScheme) => _extends({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%'\n}, enableColorScheme && !theme.vars && {\n  colorScheme: theme.palette.mode\n});\nexport const body = theme => _extends({\n  color: (theme.vars || theme).palette.text.primary\n}, theme.typography.body1, {\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  var _theme$components, _theme$components$Mui;\n  const colorSchemeStyles = {};\n  if (enableColorScheme && theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      var _scheme$palette;\n      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\\s*&/, '')] = {\n        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode\n      };\n    });\n  }\n  let defaultStyles = _extends({\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: _extends({\n      margin: 0\n    }, body(theme), {\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    })\n  }, colorSchemeStyles);\n  const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n  return defaultStyles;\n};\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(inProps) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(GlobalStyles, {\n      styles: theme => styles(theme, enableColorScheme)\n    }), children]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","import Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { Navigate } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { useUserContext } from '../../contexts/UserContext';\nimport * as Yup from 'yup';\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string().min(4).max(16).required(),\n  rememberMe: Yup.boolean(),\n});\n\nconst Login = () => {\n  const { handleLogin, isLoggedIn } = useUserContext();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n\n    validationSchema: loginSchema,\n\n    onSubmit: values => {\n      handleLogin(values);\n    },\n  });\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box mt={8} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <Typography component=\"h1\" variant=\"h5\">\n          Login\n        </Typography>\n        <Box component=\"form\" onSubmit={formik.handleSubmit} noValidate mt=\"1\">\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            onChange={formik.handleChange}\n            value={formik.values.email}\n            error={formik.touched.email && Boolean(formik.errors.email)}\n            helperText={formik.touched.email && formik.errors.email}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            helperText={formik.touched.password && formik.errors.password}\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                name=\"rememberMe\"\n                value=\"remember\"\n                color=\"primary\"\n                onChange={formik.handleChange}\n              />\n            }\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Login\n          </Button>\n        </Box>\n      </Box>\n      {isLoggedIn && <Navigate to=\"/dashboard\" />}\n    </Container>\n  );\n};\n\nexport default Login;\n"],"names":["html","theme","enableColorScheme","_extends","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","WebkitTextSizeAdjust","vars","colorScheme","palette","mode","body","color","text","primary","typography","body1","backgroundColor","background","default","common","white","inProps","props","useThemeProps","name","children","_jsxs","React","_jsx","GlobalStyles","styles","_theme$components","_theme$components$Mui","colorSchemeStyles","colorSchemes","Object","entries","forEach","_scheme$palette","key","scheme","getColorSchemeSelector","replace","defaultStyles","fontWeight","fontWeightBold","margin","themeOverrides","components","MuiCssBaseline","styleOverrides","loginSchema","Yup","shape","email","required","password","min","max","rememberMe","useUserContext","handleLogin","isLoggedIn","formik","useFormik","initialValues","validationSchema","onSubmit","values","Container","component","maxWidth","Box","mt","display","flexDirection","alignItems","Typography","variant","handleSubmit","noValidate","TextField","fullWidth","id","label","autoComplete","onChange","handleChange","value","error","touched","Boolean","errors","helperText","type","FormControlLabel","control","Checkbox","Button","sx","mb","to"],"sourceRoot":""}