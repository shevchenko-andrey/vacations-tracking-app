{"version":3,"file":"static/js/670.5f16b081.chunk.js","mappings":"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","sources":["screens/Dashboard/Dushboard.models.ts","models/moment.models.ts","screens/Dashboard/DushboardTableView/DushboardTableView.tsx","screens/Dashboard/DushboardCalendarView/DushboardCalendarView.tsx","screens/Dashboard/DushboardTogglePannel/DushboardTogglePannel.tsx","screens/Dashboard/Dushboard.tsx","service/vacationsRequestService.ts","shared/Header/Header.tsx","shared/Layout/Layout.tsx"],"sourcesContent":["export enum DashboardDataView {\n  TABLE_VIEW = 'table view',\n  CALENDAR_VIEW = 'calendar view',\n}\n\nexport enum DushboardFilterMod {\n  ACTUAL = 'actual',\n  HISTORY = 'history',\n}\n","export enum MomentDateTimeFormat {\n  DOT_FORMAT = 'DD.MM.YYYY',\n  DAY = 'D',\n  SPAСE_FULL_FORMAT = 'DD MM YYYY hh:mm:ss',\n}\n","import moment from 'moment';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport { Box, Skeleton, Typography } from '@mui/material';\nimport { FC, useEffect, useState } from 'react';\nimport { IRequestFullData } from '../../../models/request.models';\nimport { getRequests } from '../../../service/vacationsRequestService';\nimport { DushboardFilterMod } from '../Dushboard.models';\nimport { MomentDateTimeFormat } from '../../../models/moment.models';\n\nconst TABLE_COLUMNS: GridColDef[] = [\n  { field: 'id', headerName: 'Absence ID', width: 130 },\n  { field: 'type', headerName: 'Type', width: 120 },\n  {\n    field: 'startDate',\n    headerName: 'Start Date',\n    width: 130,\n    valueGetter: (\n      params: GridValueGetterParams<GridColDef, IRequestFullData>\n    ) => moment(params.row.startDate).format(MomentDateTimeFormat.DOT_FORMAT),\n  },\n  {\n    field: 'endDate',\n    headerName: 'End Date',\n    width: 130,\n    valueGetter: (\n      params: GridValueGetterParams<GridColDef, IRequestFullData>\n    ) => moment(params.row.endDate).format(MomentDateTimeFormat.DOT_FORMAT),\n  },\n  {\n    field: 'notes',\n    headerName: 'Notes',\n    width: 400,\n  },\n  {\n    field: 'actions',\n    headerName: 'Actions',\n    width: 260,\n    valueGetter: (\n      params: GridValueGetterParams<GridColDef, IRequestFullData>\n    ) =>\n      moment(params.row.actions).format(MomentDateTimeFormat.SPAСE_FULL_FORMAT),\n  },\n];\n\ninterface ITableViewProps {\n  filter: DushboardFilterMod;\n}\n\nexport const DushBoardTableView: FC<ITableViewProps> = ({ filter }) => {\n  const [tableRows, setTableRows] = useState<IRequestFullData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchUserRequest = async () => {\n      const tableRows = await getRequests({ filter });\n      setTableRows(tableRows);\n    };\n    try {\n      setIsLoading(true);\n      fetchUserRequest();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [filter]);\n\n  if (isLoading) {\n    return (\n      <Skeleton width={'100%'} component=\"div\" height=\"400px\">\n        <DataGrid rows={tableRows} columns={TABLE_COLUMNS} />\n      </Skeleton>\n    );\n  }\n  if (tableRows.length === 0) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Typography>First add data</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <DataGrid\n      rows={tableRows}\n      columns={TABLE_COLUMNS}\n      pageSize={5}\n      rowsPerPageOptions={[5]}\n      checkboxSelection\n    />\n  );\n};\n","import { Box, Typography } from '@mui/material';\nimport moment, { Moment } from 'moment';\nimport { MomentDateTimeFormat } from '../../../models/moment.models';\n\nconst AMOUNT_OF_DAY = 42;\n\nexport const DushBoardCalendarView = () => {\n  const selectedDay: Moment = moment();\n  const startDayInstance = selectedDay\n    .clone()\n    .startOf('month')\n    .startOf('week')\n    .clone()\n    .subtract(1, 'day');\n\n  const arrayOfDay = [...Array(AMOUNT_OF_DAY)].map(() =>\n    startDayInstance.add(1, 'day').clone()\n  );\n\n  return (\n    <Box\n      bgcolor=\"#ccc\"\n      display=\"grid\"\n      gap=\"1px\"\n      gridTemplateColumns={'repeat(7, 1fr)'}\n      gridTemplateRows={'repeat(6, 1fr)'}\n    >\n      {arrayOfDay.map(day => (\n        <Box color=\"#fff\" bgcolor=\"#837373\" minHeight=\"80px\" key={day.unix()}>\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Box\n              color={day.isSame(selectedDay, 'day') ? '#ff0000' : '#000'}\n              pt=\"10px\"\n              pr=\"10px\"\n            >\n              <Typography>{day.format(MomentDateTimeFormat.DAY)}</Typography>\n            </Box>\n          </Box>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import { FC, SetStateAction } from 'react';\nimport { ToggleButton, ToggleButtonGroup, Box } from '@mui/material';\nimport { DushboardFilterMod } from '../Dushboard.models';\n\ninterface TogglePannelProps {\n  filter: string;\n  handleToggleFilter: (\n    _: React.MouseEvent<HTMLElement>,\n    filter: SetStateAction<DushboardFilterMod>\n  ) => void;\n}\n\nexport const DushboardTogglePannel: FC<TogglePannelProps> = ({\n  filter,\n  handleToggleFilter,\n}) => {\n  return (\n    <Box maxWidth={'400px'}>\n      <ToggleButtonGroup\n        fullWidth\n        color=\"primary\"\n        value={filter}\n        exclusive\n        onChange={handleToggleFilter}\n        aria-label=\"Platform\"\n      >\n        <ToggleButton fullWidth value=\"actual\">\n          Actual\n        </ToggleButton>\n        <ToggleButton fullWidth value=\"history\">\n          History\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Box>\n  );\n};\n","import AddIcon from '@mui/icons-material/Add';\nimport React, { SetStateAction, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout } from '../../shared/Layout';\nimport { DushboardFilterMod, DashboardDataView } from './Dushboard.models';\nimport { Box, Fab, Typography, Button } from '@mui/material';\nimport { DushBoardTableView } from './DushboardTableView';\nimport { DushBoardCalendarView } from './DushboardCalendarView';\nimport { DushboardTogglePannel } from './DushboardTogglePannel';\n\nconst Dashboard = () => {\n  // TODO: Add Datapicker\n  // const [selectedDay, setSelectedDay] = useState<Moment>(moment());\n  const [filter, setFilter] = useState(DushboardFilterMod.ACTUAL);\n  const [selectedView, setSelectedView] = useState(\n    DashboardDataView.TABLE_VIEW\n  );\n\n  const handleToggleFilter = (\n    _: React.MouseEvent<HTMLElement>,\n    filter: SetStateAction<DushboardFilterMod>\n  ) => {\n    setFilter(filter);\n  };\n\n  const handleChangeView = () => {\n    selectedView === DashboardDataView.TABLE_VIEW\n      ? setSelectedView(DashboardDataView.CALENDAR_VIEW)\n      : setSelectedView(DashboardDataView.TABLE_VIEW);\n  };\n\n  return (\n    <Layout title=\"Dashboard\">\n      <Box component=\"section\" pt=\"30px\" pb=\"30px\">\n        <Box\n          display={'flex'}\n          justifyContent={'space-between'}\n          alignItems=\"center\"\n        >\n          {selectedView === DashboardDataView.TABLE_VIEW ? (\n            <DushboardTogglePannel\n              filter={filter}\n              handleToggleFilter={handleToggleFilter}\n            />\n          ) : null}\n          <Box>\n            <Fab\n              component={Link}\n              to=\"/vacation/request\"\n              color=\"primary\"\n              variant=\"extended\"\n              aria-label=\"add\"\n            >\n              <AddIcon />\n              <Box pr=\"20px\" pl=\"20px\">\n                <Typography>New request</Typography>\n              </Box>\n            </Fab>\n          </Box>\n          <Box>\n            <Button variant=\"contained\" onClick={handleChangeView}>\n              {DashboardDataView.CALENDAR_VIEW}\n            </Button>\n          </Box>\n        </Box>\n        <Box overflow=\"auto\" pt=\"30px\" height=\"400px\" width=\"100%\">\n          {selectedView === DashboardDataView.TABLE_VIEW ? (\n            <DushBoardTableView filter={filter} />\n          ) : (\n            <DushBoardCalendarView />\n          )}\n        </Box>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default Dashboard;\n","import moment from 'moment';\nimport { DushboardFilterMod } from '../screens/Dashboard/Dushboard.models';\nimport { IRequest, IRequestFullData } from './../models/request.models';\n\ninterface IRequestOptions {\n  filter?: DushboardFilterMod;\n}\n\nexport const getRequests = async ({ filter }: IRequestOptions) => {\n  const data = localStorage.getItem('requests');\n  if (!data) {\n    return [];\n  }\n  const requests = JSON.parse(data) as IRequestFullData[];\n\n  switch (filter) {\n    case DushboardFilterMod.ACTUAL:\n      return requests.filter(({ endDate }) =>\n        moment(endDate).isAfter(moment())\n      );\n    case DushboardFilterMod.HISTORY:\n      return requests.filter(({ endDate }) =>\n        moment(endDate).isBefore(moment())\n      );\n    default:\n      return requests;\n  }\n};\n\nexport const addNewRequest = async (request: IRequest) => {\n  const allRequests = await getRequests({});\n  const newRequests = [\n    ...allRequests,\n    {\n      ...request,\n      id: moment().unix(),\n      actions: moment().format('YYYY-MM-DD HH:mm:ss'),\n    },\n  ];\n  localStorage.setItem('requests', JSON.stringify(newRequests));\n  return request;\n};\n","import { FC, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppBar from '@mui/material/AppBar';\nimport Typography from '@mui/material/Typography';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport Toolbar from '@mui/material/Toolbar';\nimport { Box, Button, Popover, IconButton, Avatar, Fab } from '@mui/material';\n\ninterface IHeaderProps {\n  auth: boolean;\n  title: string;\n  email: string;\n  backLinkPath?: string;\n  handleLogOut: () => void;\n}\n\nexport const Header: FC<IHeaderProps> = ({\n  title,\n  auth,\n  email,\n  handleLogOut,\n  backLinkPath,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setIsOpen(true);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Box>\n          {backLinkPath && (\n            <Fab\n              component={Link}\n              to={backLinkPath}\n              color=\"secondary\"\n              variant=\"circular\"\n            >\n              <ArrowBackIcon />\n            </Fab>\n          )}\n        </Box>\n        <Typography\n          textAlign=\"center\"\n          variant=\"h6\"\n          component=\"p\"\n          sx={{ flexGrow: 1 }}\n        >\n          {title}\n        </Typography>\n        {auth && (\n          <div>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              color=\"inherit\"\n            >\n              <Avatar sx={{ bgcolor: '#74gfhg' }}>\n                {email[0].toUpperCase()}\n              </Avatar>\n            </IconButton>\n            <Popover\n              open={isOpen}\n              anchorEl={anchorEl}\n              onClose={handleClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n            >\n              <Box p=\"20px\">\n                <Typography>{email}</Typography>\n                <Box\n                  color=\"primary\"\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  width={'100%'}\n                >\n                  <Button title=\"Logout\" onClick={handleLogOut}>\n                    Logout\n                  </Button>\n                </Box>\n              </Box>\n            </Popover>\n          </div>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import { FC } from 'react';\nimport { Header } from '../Header';\nimport { useUserContext } from '../../contexts/UserContext';\nimport { Container } from '@mui/material';\n\ninterface ILayoutProps {\n  title: string;\n  children: React.ReactNode;\n  backLinkPath?: string;\n}\n\nexport const Layout: FC<ILayoutProps> = ({ title, children, backLinkPath }) => {\n  const { email, handleLogOut, isLoggedIn } = useUserContext();\n\n  return (\n    <>\n      <Header\n        auth={isLoggedIn}\n        email={email}\n        handleLogOut={handleLogOut}\n        title={title}\n        backLinkPath={backLinkPath}\n      />\n\n      <Container component=\"main\">{children}</Container>\n    </>\n  );\n};\n"],"names":["DashboardDataView","DushboardFilterMod","MomentDateTimeFormat","TABLE_COLUMNS","field","headerName","width","valueGetter","params","moment","row","startDate","format","DOT_FORMAT","endDate","actions","DushBoardTableView","filter","useState","tableRows","setTableRows","isLoading","setIsLoading","useEffect","fetchUserRequest","getRequests","error","console","log","Skeleton","component","height","DataGrid","rows","columns","length","Box","display","justifyContent","Typography","pageSize","rowsPerPageOptions","checkboxSelection","DushBoardCalendarView","selectedDay","startDayInstance","clone","startOf","subtract","arrayOfDay","Array","map","add","bgcolor","gap","gridTemplateColumns","gridTemplateRows","day","color","minHeight","isSame","pt","pr","DAY","unix","DushboardTogglePannel","handleToggleFilter","maxWidth","ToggleButtonGroup","fullWidth","value","exclusive","onChange","ToggleButton","setFilter","selectedView","setSelectedView","Layout","title","pb","alignItems","_","Fab","Link","to","variant","Add","pl","Button","onClick","overflow","data","localStorage","getItem","requests","JSON","parse","isAfter","isBefore","addNewRequest","request","allRequests","newRequests","id","setItem","stringify","Header","auth","email","handleLogOut","backLinkPath","isOpen","setIsOpen","anchorEl","setAnchorEl","AppBar","position","Toolbar","ArrowBack","textAlign","sx","flexGrow","IconButton","size","event","currentTarget","Avatar","toUpperCase","Popover","open","onClose","anchorOrigin","vertical","horizontal","p","children","useUserContext","isLoggedIn","Container"],"sourceRoot":""}