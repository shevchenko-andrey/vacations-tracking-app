{"version":3,"file":"static/js/148.ab50cd34.chunk.js","mappings":"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","sources":["screens/Dashboard/Dushboard.models.ts","shared/Header/Header.tsx","shared/Layout/Layout.tsx","service/vacationsRequestService.ts","screens/Dashboard/DushboardTableView/DushboardTableView.tsx","screens/Dashboard/Dushboard.tsx"],"sourcesContent":["export enum ViewMod {\n  TABLE_VIEW = 'table view',\n  CALENDAR_VIEW = 'calendar view',\n}\n\nexport enum FilterMod {\n  ACTUAL = 'actual',\n  HISTORY = 'history',\n}\n","import { useState } from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport Toolbar from '@mui/material/Toolbar';\nimport { Box, Button, Popover, Avatar } from '@mui/material';\n\ninterface IHeaderProps {\n  auth: boolean;\n  title: string;\n  email: string;\n  handleLogOut: () => void;\n}\n\nexport const Header = ({ title, auth, email, handleLogOut }: IHeaderProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setIsOpen(true);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography\n          textAlign=\"center\"\n          variant=\"h6\"\n          component=\"p\"\n          sx={{ flexGrow: 1 }}\n        >\n          {title}\n        </Typography>\n        {auth && (\n          <div>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              color=\"inherit\"\n            >\n              <Avatar sx={{ bgcolor: '#74gfhg' }}>\n                {email[0].toUpperCase()}\n              </Avatar>\n            </IconButton>\n            <Popover\n              open={isOpen}\n              anchorEl={anchorEl}\n              onClose={handleClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n            >\n              <Box p=\"20px\">\n                <Typography>{email}</Typography>\n                <Box\n                  color=\"primary\"\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  width={'100%'}\n                >\n                  <Button title=\"Logout\" onClick={handleLogOut}>\n                    Logout\n                  </Button>\n                </Box>\n              </Box>\n            </Popover>\n          </div>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import { Header } from '../Header';\nimport { useUserContext } from '../../contexts/UserContext';\nimport { Container } from '@mui/material';\n\ninterface ILayoutProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nexport const Layout = ({ title, children }: ILayoutProps) => {\n  const { email, handleLogOut, isLoggedIn } = useUserContext();\n\n  return (\n    <>\n      <Header\n        auth={isLoggedIn}\n        email={email}\n        handleLogOut={handleLogOut}\n        title={title}\n      />\n\n      <Container component=\"main\">{children}</Container>\n    </>\n  );\n};\n","import moment from 'moment';\nimport { FilterMod } from '../screens/Dashboard/Dushboard.models';\nimport { IRequest } from './../models/request.models';\n\ninterface IRequestOptions {\n  filter?: FilterMod;\n}\n\nexport const getRequests = async ({ filter }: IRequestOptions) => {\n  const data = localStorage.getItem('requests');\n  if (!data) {\n    return [];\n  }\n  const requests = JSON.parse(data) as IRequest[];\n\n  switch (filter) {\n    case FilterMod.ACTUAL:\n      return requests.filter(({ endDate }) =>\n        moment(endDate).isAfter(moment())\n      );\n    case FilterMod.HISTORY:\n      return requests.filter(({ endDate }) =>\n        moment(endDate).isBefore(moment())\n      );\n    default:\n      return requests;\n  }\n};\n\nexport const addRequests = async (request: IRequest) => {\n  const allRequests = await getRequests({});\n  const newRequests = [...allRequests, request];\n  localStorage.setItem('requests', JSON.stringify(newRequests));\n  return request;\n};\n","import { DataGrid, GridColDef, GridValidRowModel } from '@mui/x-data-grid';\nimport { Box, Skeleton, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { IRequest } from '../../../models/request.models';\nimport { getRequests } from '../../../service/vacationsRequestService';\nimport { FilterMod } from '../Dushboard.models';\n\nconst TABLE_COLUMNS: GridColDef<GridValidRowModel, string, string>[] = [\n  { field: 'id', headerName: 'Absence ID', width: 130 },\n  { field: 'type', headerName: 'Type', width: 120 },\n  { field: 'startDate', headerName: 'Start Date', width: 130 },\n  { field: 'endDate', headerName: 'End Date', width: 130 },\n  {\n    field: 'notes',\n    headerName: 'Notes',\n    width: 500,\n  },\n  {\n    field: 'actions',\n    headerName: 'Actions',\n    width: 130,\n  },\n];\n\ninterface ITableViewProps {\n  filter: FilterMod;\n}\n\nexport const DushBoardTableView = ({ filter }: ITableViewProps) => {\n  const [tableRows, setTableRows] = useState<IRequest[] | []>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchUserRequest = async () => {\n      const tableRows = await getRequests({ filter });\n      setTableRows(tableRows);\n    };\n    try {\n      setIsLoading(true);\n      fetchUserRequest();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [filter]);\n\n  if (isLoading) {\n    return (\n      <Skeleton width={'100%'} component=\"div\" height=\"400px\">\n        <DataGrid rows={tableRows} columns={TABLE_COLUMNS} />\n      </Skeleton>\n    );\n  }\n  if (tableRows.length < 1) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Typography>First add data</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <DataGrid\n      rows={tableRows}\n      columns={TABLE_COLUMNS}\n      pageSize={5}\n      rowsPerPageOptions={[5]}\n      checkboxSelection\n    />\n  );\n};\n","import React, { SetStateAction, useState } from 'react';\nimport AddIcon from '@mui/icons-material/Add';\nimport { Layout } from '../../shared/Layout';\nimport { FilterMod, ViewMod } from './Dushboard.models';\nimport {\n  ToggleButton,\n  ToggleButtonGroup,\n  Box,\n  Fab,\n  Typography,\n  Button,\n} from '@mui/material';\n\nimport { DushBoardTableView } from './DushboardTableView';\n\nexport default function Dashboard() {\n  const [filter, setFilter] = useState(FilterMod.ACTUAL);\n  const [selectedView, setSelectedView] = useState(ViewMod.TABLE_VIEW);\n\n  const handleTogleFilter = (\n    _: React.MouseEvent<HTMLElement>,\n    filter: SetStateAction<FilterMod>\n  ) => {\n    setFilter(filter);\n  };\n\n  const handleChangeView = () => {\n    selectedView === ViewMod.TABLE_VIEW\n      ? setSelectedView(ViewMod.CALENDAR_VIEW)\n      : setSelectedView(ViewMod.TABLE_VIEW);\n  };\n\n  return (\n    <Layout title=\"Dashboard\">\n      <Box component=\"section\" pt=\"30px\" pb=\"30px\">\n        <Box\n          display={'flex'}\n          justifyContent={'space-between'}\n          alignItems=\"center\"\n        >\n          <Box maxWidth={'400px'}>\n            <ToggleButtonGroup\n              fullWidth\n              color=\"primary\"\n              value={filter}\n              exclusive\n              onChange={handleTogleFilter}\n              aria-label=\"Platform\"\n            >\n              <ToggleButton fullWidth value=\"actual\">\n                Actual\n              </ToggleButton>\n              <ToggleButton fullWidth value=\"history\">\n                History\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Box>\n          <Box>\n            <Fab color=\"primary\" variant=\"extended\" aria-label=\"add\">\n              <AddIcon />\n              <Box pr=\"20px\" pl=\"20px\">\n                <Typography>New request</Typography>\n              </Box>\n            </Fab>\n          </Box>\n          <Box>\n            <Button variant=\"contained\" onClick={handleChangeView}>\n              {selectedView}\n            </Button>\n          </Box>\n        </Box>\n        <Box overflow=\"auto\" pt=\"30px\" height=\"400px\" width=\"100%\">\n          {selectedView === ViewMod.TABLE_VIEW ? (\n            <DushBoardTableView filter={filter} />\n          ) : null}\n        </Box>\n      </Box>\n    </Layout>\n  );\n}\n"],"names":["ViewMod","FilterMod","Header","title","auth","email","handleLogOut","useState","isOpen","setIsOpen","anchorEl","setAnchorEl","AppBar","position","Toolbar","Typography","textAlign","variant","component","sx","flexGrow","IconButton","size","onClick","event","currentTarget","color","Avatar","bgcolor","toUpperCase","Popover","open","onClose","anchorOrigin","vertical","horizontal","Box","p","display","justifyContent","width","Button","Layout","children","useUserContext","isLoggedIn","Container","getRequests","filter","data","localStorage","getItem","requests","JSON","parse","ACTUAL","HISTORY","endDate","moment","isAfter","isBefore","TABLE_COLUMNS","field","headerName","DushBoardTableView","tableRows","setTableRows","isLoading","setIsLoading","useEffect","fetchUserRequest","error","console","log","Skeleton","height","DataGrid","rows","columns","length","pageSize","rowsPerPageOptions","checkboxSelection","Dashboard","setFilter","TABLE_VIEW","selectedView","setSelectedView","pt","pb","alignItems","maxWidth","ToggleButtonGroup","fullWidth","value","exclusive","onChange","_","ToggleButton","Fab","Add","pr","pl","CALENDAR_VIEW","overflow"],"sourceRoot":""}