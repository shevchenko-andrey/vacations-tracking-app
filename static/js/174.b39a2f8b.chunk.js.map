{"version":3,"file":"static/js/174.b39a2f8b.chunk.js","mappings":"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","sources":["screens/Dashboard/Dushboard.models.ts","screens/Request/Request.tsx","service/vacationsRequestService.ts","shared/Header/Header.tsx","shared/Layout/Layout.tsx"],"sourcesContent":["export enum DashboardDataView {\n  TABLE_VIEW = 'table view',\n  CALENDAR_VIEW = 'calendar view',\n}\n\nexport enum DushboardFilterMod {\n  ACTUAL = 'actual',\n  HISTORY = 'history',\n}\n","import * as Yup from 'yup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport moment from 'moment';\n\nimport { useNavigate } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { IRequest } from '../../models/request.models';\nimport { addNewRequest } from '../../service/vacationsRequestService';\nimport { Layout } from '../../shared/Layout';\nimport { Container } from '@mui/system';\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { TextareaAutosize } from '@mui/material';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\n\nconst requestSchema = Yup.object().shape({\n  type: Yup.string().min(2).max(10).required(),\n  startDate: Yup.date().required(),\n  endDate: Yup.date().required(),\n  notes: Yup.string(),\n});\n\nconst Request = () => {\n  const navigate = useNavigate();\n  const handleSubmit = async (values: IRequest) => {\n    await addNewRequest(values);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      type: '',\n      startDate: moment(),\n      endDate: moment(),\n      notes: '',\n    },\n\n    validationSchema: requestSchema,\n\n    onSubmit: async (values, actions) => {\n      await handleSubmit(values);\n      actions.resetForm();\n      navigate('/bushboard');\n    },\n  });\n\n  return (\n    <Layout title=\"Request new vacantions\" backLinkPath={'/dushboard'}>\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Box\n            component=\"form\"\n            onSubmit={formik.handleSubmit}\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            noValidate\n            sx={{ m: '0 auto' }}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={5}>\n                <Box>\n                  <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    id=\"type\"\n                    label=\"Vacation Type\"\n                    name=\"type\"\n                    onChange={formik.handleChange}\n                    value={formik.values.type}\n                    error={formik.touched.type && Boolean(formik.errors.type)}\n                    helperText={formik.touched.type && formik.errors.type}\n                  />\n                  <LocalizationProvider dateAdapter={AdapterMoment}>\n                    <DesktopDatePicker\n                      label=\"Start Date\"\n                      inputFormat=\"MM/DD/YYYY\"\n                      value={formik.values.startDate}\n                      onChange={value =>\n                        formik.setFieldValue('startDate', value)\n                      }\n                      renderInput={params => (\n                        <TextField\n                          fullWidth\n                          margin=\"normal\"\n                          required\n                          {...params}\n                        />\n                      )}\n                    />\n                    <DesktopDatePicker\n                      label=\"End Date\"\n                      inputFormat=\"MM/DD/YYYY\"\n                      value={formik.values.endDate}\n                      onChange={value => formik.setFieldValue('endDate', value)}\n                      renderInput={params => (\n                        <TextField\n                          fullWidth\n                          margin=\"normal\"\n                          required\n                          {...params}\n                        />\n                      )}\n                    />\n                  </LocalizationProvider>\n\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                  >\n                    Submit\n                  </Button>\n                </Box>\n              </Grid>\n              <Grid item xs={5}>\n                <Box width=\"100%\" height=\"100%\" pt=\"20px\" pb=\"20px\">\n                  <TextareaAutosize\n                    id=\"notes\"\n                    style={{ width: '100%', height: '100%', padding: '20px' }}\n                    name=\"notes\"\n                    maxRows={4}\n                    onChange={formik.handleChange}\n                    value={formik.values.notes}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Request;\n","import moment from 'moment';\nimport { DushboardFilterMod } from '../screens/Dashboard/Dushboard.models';\nimport { IRequest, IRequestFullData } from './../models/request.models';\n\ninterface IRequestOptions {\n  filter?: DushboardFilterMod;\n}\n\nexport const getRequests = async ({ filter }: IRequestOptions) => {\n  const data = localStorage.getItem('requests');\n  if (!data) {\n    return [];\n  }\n  const requests = JSON.parse(data) as IRequestFullData[];\n\n  switch (filter) {\n    case DushboardFilterMod.ACTUAL:\n      return requests.filter(({ endDate }) =>\n        moment(endDate).isAfter(moment())\n      );\n    case DushboardFilterMod.HISTORY:\n      return requests.filter(({ endDate }) =>\n        moment(endDate).isBefore(moment())\n      );\n    default:\n      return requests;\n  }\n};\n\nexport const addNewRequest = async (request: IRequest) => {\n  const allRequests = await getRequests({});\n  const newRequests = [\n    ...allRequests,\n    {\n      ...request,\n      id: moment().unix(),\n      actions: moment().format('YYYY-MM-DD HH:mm:ss'),\n    },\n  ];\n  localStorage.setItem('requests', JSON.stringify(newRequests));\n  return request;\n};\n","import { FC, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppBar from '@mui/material/AppBar';\nimport Typography from '@mui/material/Typography';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport Toolbar from '@mui/material/Toolbar';\nimport { Box, Button, Popover, IconButton, Avatar, Fab } from '@mui/material';\n\ninterface IHeaderProps {\n  auth: boolean;\n  title: string;\n  email: string;\n  backLinkPath?: string;\n  handleLogOut: () => void;\n}\n\nexport const Header: FC<IHeaderProps> = ({\n  title,\n  auth,\n  email,\n  handleLogOut,\n  backLinkPath,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setIsOpen(true);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Box>\n          {backLinkPath && (\n            <Fab\n              component={Link}\n              to={backLinkPath}\n              color=\"secondary\"\n              variant=\"circular\"\n            >\n              <ArrowBackIcon />\n            </Fab>\n          )}\n        </Box>\n        <Typography\n          textAlign=\"center\"\n          variant=\"h6\"\n          component=\"p\"\n          sx={{ flexGrow: 1 }}\n        >\n          {title}\n        </Typography>\n        {auth && (\n          <div>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              color=\"inherit\"\n            >\n              <Avatar sx={{ bgcolor: '#74gfhg' }}>\n                {email[0].toUpperCase()}\n              </Avatar>\n            </IconButton>\n            <Popover\n              open={isOpen}\n              anchorEl={anchorEl}\n              onClose={handleClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n            >\n              <Box p=\"20px\">\n                <Typography>{email}</Typography>\n                <Box\n                  color=\"primary\"\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  width={'100%'}\n                >\n                  <Button title=\"Logout\" onClick={handleLogOut}>\n                    Logout\n                  </Button>\n                </Box>\n              </Box>\n            </Popover>\n          </div>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import { FC } from 'react';\nimport { Header } from '../Header';\nimport { useUserContext } from '../../contexts/UserContext';\nimport { Container } from '@mui/material';\n\ninterface ILayoutProps {\n  title: string;\n  children: React.ReactNode;\n  backLinkPath?: string;\n}\n\nexport const Layout: FC<ILayoutProps> = ({ title, children, backLinkPath }) => {\n  const { email, handleLogOut, isLoggedIn } = useUserContext();\n\n  return (\n    <>\n      <Header\n        auth={isLoggedIn}\n        email={email}\n        handleLogOut={handleLogOut}\n        title={title}\n        backLinkPath={backLinkPath}\n      />\n\n      <Container component=\"main\">{children}</Container>\n    </>\n  );\n};\n"],"names":["DashboardDataView","DushboardFilterMod","requestSchema","Yup","shape","type","min","max","required","startDate","endDate","notes","navigate","useNavigate","handleSubmit","values","addNewRequest","formik","useFormik","initialValues","moment","validationSchema","onSubmit","actions","resetForm","Layout","title","backLinkPath","Container","Box","display","justifyContent","component","alignItems","noValidate","sx","m","Grid","container","spacing","item","xs","TextField","margin","fullWidth","id","label","name","onChange","handleChange","value","error","touched","Boolean","errors","helperText","LocalizationProvider","dateAdapter","AdapterMoment","DesktopDatePicker","inputFormat","setFieldValue","renderInput","params","Button","variant","mt","mb","width","height","pt","pb","TextareaAutosize","style","padding","maxRows","getRequests","filter","data","localStorage","getItem","requests","JSON","parse","isAfter","isBefore","request","allRequests","newRequests","unix","format","setItem","stringify","Header","auth","email","handleLogOut","useState","isOpen","setIsOpen","anchorEl","setAnchorEl","AppBar","position","Toolbar","Fab","Link","to","color","ArrowBack","Typography","textAlign","flexGrow","IconButton","size","onClick","event","currentTarget","Avatar","bgcolor","toUpperCase","Popover","open","onClose","anchorOrigin","vertical","horizontal","p","children","useUserContext","isLoggedIn"],"sourceRoot":""}